/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { map } from 'rxjs/operators';
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

import { isMoment } from 'moment';
import * as moment from 'moment';
import * as qs from 'qs';
import { Constants } from 'src/app/constants';

export function buildQueryString(queryParams: any): string {
    const params = Object.entries(queryParams || {}).reduce((params: any, [key, value]) => {
        params[key] = convertQueryParam(value);
        return params;
    }, {});

    return qs.stringify(params, { addQueryPrefix: true, allowDots: true });
}

function convertQueryParam(queryParam: any): any {
    if (isMoment(queryParam)) {
        return queryParam.toISOString();
    } else if (Array.isArray(queryParam)) {
        const v = queryParam.map(convertQueryParam);
        return v;
    } else if (typeof queryParam === 'object' && queryParam != null) {
        return Object.entries(queryParam).reduce((queryParam: any, [key, value]) => {
            queryParam[key] = convertQueryParam(value);
            return queryParam;
        }, {});
    } else {
        return queryParam;
    }
}

export interface ICollegeClient {
    getAllColleges(): Observable<CollegeDto[]>;
    addCollege(dto: NameOnlyUpsertDto): Observable<SimpleUpsertDto>;
    updateCollege(dto: NameOnlyUpsertDto): Observable<SimpleUpsertDto>;
    getCollege(collegeId: string): Observable<CollegeDto>;
}

@Injectable({
    providedIn: 'root'
})
export class CollegeClient implements ICollegeClient {
    constructor(private readonly httpClient: HttpClient) {
    }

    getAllColleges(): Observable<CollegeDto[]> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/College`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(result => result.map(CollegeDto.fromJS)))
    }

    addCollege(dto: NameOnlyUpsertDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/College`;

        return this.httpClient.post<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }

    updateCollege(dto: NameOnlyUpsertDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/College`;

        return this.httpClient.put<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }

    getCollege(collegeId: string): Observable<CollegeDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/College/${collegeId}`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(CollegeDto.fromJS))
    }
}

export interface IHomeworkClient {
    getHomeWorkAssignment(homeWorkAssignmentId?: string): Observable<HomeWorkAssignmentDto>;
    addHomeWorkAssignment(dto: HomeWorkAssignmentAddDto): Observable<SimpleUpsertDto>;
    updateHomeWorkAssignment(dto: HomeWorkAssignmentUpdateDto): Observable<SimpleUpsertDto>;
    addHomeWorkAssignmentItem(dto: HomeWorkAssignmentItemAddDto): Observable<SimpleUpsertDto>;
    updateHomeWorkAssignmentItem(dto: HomeWorkAssignmentItemUpdateDto): Observable<SimpleUpsertDto>;
}

@Injectable({
    providedIn: 'root'
})
export class HomeworkClient implements IHomeworkClient {
    constructor(private readonly httpClient: HttpClient) {
    }

    getHomeWorkAssignment(homeWorkAssignmentId?: string): Observable<HomeWorkAssignmentDto> {
        const queryString = buildQueryString({
            homeWorkAssignmentId,
        });
        const url = `${Constants.apiAutoGeneratedRoot}/api/Homework/get-homeWork-assignment${queryString}`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(HomeWorkAssignmentDto.fromJS))
    }

    addHomeWorkAssignment(dto: HomeWorkAssignmentAddDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/Homework/add-homeWork-assignment`;

        return this.httpClient.post<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }

    updateHomeWorkAssignment(dto: HomeWorkAssignmentUpdateDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/Homework/update-homeWork-assignment`;

        return this.httpClient.put<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }

    addHomeWorkAssignmentItem(dto: HomeWorkAssignmentItemAddDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/Homework/add-homeWork-assignment-item`;

        return this.httpClient.post<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }

    updateHomeWorkAssignmentItem(dto: HomeWorkAssignmentItemUpdateDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/Homework/update-homeWork-assignment-item`;

        return this.httpClient.put<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }
}

export interface ISpeachClient {
    getSpeach(sentence?: string): Observable<Blob | null>;
}

@Injectable({
    providedIn: 'root'
})
export class SpeachClient implements ISpeachClient {
    constructor(private readonly httpClient: HttpClient) {
    }

    getSpeach(sentence?: string): Observable<Blob | null> {
        const queryString = buildQueryString({
            sentence,
        });
        const url = `${Constants.apiAutoGeneratedRoot}/api/Speach${queryString}`;

        return this.httpClient.get(url, { responseType: "blob" });
    }
}

export interface ITestClient {
    getSomethigs(test?: string): Observable<IdDto>;
}

@Injectable({
    providedIn: 'root'
})
export class TestClient implements ITestClient {
    constructor(private readonly httpClient: HttpClient) {
    }

    getSomethigs(test?: string): Observable<IdDto> {
        const queryString = buildQueryString({
            test,
        });
        const url = `${Constants.apiAutoGeneratedRoot}/api/Test${queryString}`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(IdDto.fromJS))
    }
}

export interface IUserClient {
    getCurrentUserClaims(): Observable<CurrentUsersClaimsDto>;
    getUserLookups(): Observable<UserLookupsDto>;
    getAllUsers(): Observable<UserDto[]>;
    addUser(dto: AddUserDto): Observable<SimpleUpsertDto>;
    updateUser(dto: UpdateUserDto): Observable<SimpleUpsertDto>;
}

@Injectable({
    providedIn: 'root'
})
export class UserClient implements IUserClient {
    constructor(private readonly httpClient: HttpClient) {
    }

    getCurrentUserClaims(): Observable<CurrentUsersClaimsDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/User/get-current-user-claims`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(CurrentUsersClaimsDto.fromJS))
    }

    getUserLookups(): Observable<UserLookupsDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/User/user-lookups`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(UserLookupsDto.fromJS))
    }

    getAllUsers(): Observable<UserDto[]> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/User`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(result => result.map(UserDto.fromJS)))
    }

    addUser(dto: AddUserDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/User`;

        return this.httpClient.post<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }

    updateUser(dto: UpdateUserDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/User`;

        return this.httpClient.put<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }
}

export interface IYearClassClient {
    getCollegeLookups(): Observable<LookupDto[]>;
    getYearClasses(academicYear?: number, collegeId?: string): Observable<YearClassDto[]>;
    addYearClass(dto: YearClassAddDto): Observable<SimpleUpsertDto>;
    updateYearClass(dto: YearClassUpdateDto): Observable<SimpleUpsertDto>;
}

@Injectable({
    providedIn: 'root'
})
export class YearClassClient implements IYearClassClient {
    constructor(private readonly httpClient: HttpClient) {
    }

    getCollegeLookups(): Observable<LookupDto[]> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/YearClass/college-lookups`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(result => result.map(LookupDto.fromJS)))
    }

    getYearClasses(academicYear?: number, collegeId?: string): Observable<YearClassDto[]> {
        const queryString = buildQueryString({
            academicYear,
            collegeId,
        });
        const url = `${Constants.apiAutoGeneratedRoot}/api/YearClass${queryString}`;

        return this.httpClient.get<any>(url, {  })
            .pipe(map(result => result.map(YearClassDto.fromJS)))
    }

    addYearClass(dto: YearClassAddDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/YearClass`;

        return this.httpClient.post<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }

    updateYearClass(dto: YearClassUpdateDto): Observable<SimpleUpsertDto> {
        const url = `${Constants.apiAutoGeneratedRoot}/api/YearClass`;

        return this.httpClient.put<any>(url, dto, {  })
            .pipe(map(SimpleUpsertDto.fromJS))
    }
}

export class BaseDto implements IBaseDto {
    id!: string;

    constructor(data?: IBaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): BaseDto {
        const json = this.toJSON();
        let result = new BaseDto();
        result.init(json);
        return result;
    }
}

export interface IBaseDto {
    id: string;
}

export class BaseDtoDateStamps extends BaseDto implements IBaseDtoDateStamps {
    createdAt!: moment.Moment;
    updatedAt?: moment.Moment | undefined;

    constructor(data?: IBaseDtoDateStamps) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? moment(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseDtoDateStamps {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDtoDateStamps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }

    clone(): BaseDtoDateStamps {
        const json = this.toJSON();
        let result = new BaseDtoDateStamps();
        result.init(json);
        return result;
    }
}

export interface IBaseDtoDateStamps extends IBaseDto {
    createdAt: moment.Moment;
    updatedAt?: moment.Moment | undefined;
}

export class BaseDtoVersion extends BaseDtoDateStamps implements IBaseDtoVersion {
    rowVersion?: string | undefined;

    constructor(data?: IBaseDtoVersion) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rowVersion = _data["rowVersion"];
        }
    }

    static fromJS(data: any): BaseDtoVersion {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDtoVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowVersion"] = this.rowVersion;
        super.toJSON(data);
        return data; 
    }

    clone(): BaseDtoVersion {
        const json = this.toJSON();
        let result = new BaseDtoVersion();
        result.init(json);
        return result;
    }
}

export interface IBaseDtoVersion extends IBaseDtoDateStamps {
    rowVersion?: string | undefined;
}

export class BaseDtoFull extends BaseDtoVersion implements IBaseDtoFull {
    createdByAppUserId!: string;
    updatedByAppUserId?: string | undefined;

    constructor(data?: IBaseDtoFull) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdByAppUserId = _data["createdByAppUserId"];
            this.updatedByAppUserId = _data["updatedByAppUserId"];
        }
    }

    static fromJS(data: any): BaseDtoFull {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDtoFull();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdByAppUserId"] = this.createdByAppUserId;
        data["updatedByAppUserId"] = this.updatedByAppUserId;
        super.toJSON(data);
        return data; 
    }

    clone(): BaseDtoFull {
        const json = this.toJSON();
        let result = new BaseDtoFull();
        result.init(json);
        return result;
    }
}

export interface IBaseDtoFull extends IBaseDtoVersion {
    createdByAppUserId: string;
    updatedByAppUserId?: string | undefined;
}

export class CollegeDto extends BaseDtoFull implements ICollegeDto {
    collegeName?: string | undefined;

    constructor(data?: ICollegeDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.collegeName = _data["collegeName"];
        }
    }

    static fromJS(data: any): CollegeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CollegeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collegeName"] = this.collegeName;
        super.toJSON(data);
        return data; 
    }

    clone(): CollegeDto {
        const json = this.toJSON();
        let result = new CollegeDto();
        result.init(json);
        return result;
    }
}

export interface ICollegeDto extends IBaseDtoFull {
    collegeName?: string | undefined;
}

export class SimpleUpsertDto extends BaseDto implements ISimpleUpsertDto {
    rowVersion?: string | undefined;

    constructor(data?: ISimpleUpsertDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rowVersion = _data["rowVersion"];
        }
    }

    static fromJS(data: any): SimpleUpsertDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleUpsertDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowVersion"] = this.rowVersion;
        super.toJSON(data);
        return data; 
    }

    clone(): SimpleUpsertDto {
        const json = this.toJSON();
        let result = new SimpleUpsertDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleUpsertDto extends IBaseDto {
    rowVersion?: string | undefined;
}

export class NameOnlyUpsertDto extends BaseDto implements INameOnlyUpsertDto {
    rowVersion?: string | undefined;
    name?: string | undefined;

    constructor(data?: INameOnlyUpsertDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rowVersion = _data["rowVersion"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): NameOnlyUpsertDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameOnlyUpsertDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowVersion"] = this.rowVersion;
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }

    clone(): NameOnlyUpsertDto {
        const json = this.toJSON();
        let result = new NameOnlyUpsertDto();
        result.init(json);
        return result;
    }
}

export interface INameOnlyUpsertDto extends IBaseDto {
    rowVersion?: string | undefined;
    name?: string | undefined;
}

export class HomeWorkAssignmentDto implements IHomeWorkAssignmentDto {
    homeWorkAssignmentItems?: HomeWorkAssignmentItemDto[] | undefined;
    submittedHomeWorks?: SubmittedHomeWorkDto[] | undefined;
    yearClassId!: string;
    dueDate!: moment.Moment;

    constructor(data?: IHomeWorkAssignmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.homeWorkAssignmentItems) {
                this.homeWorkAssignmentItems = [];
                for (let i = 0; i < data.homeWorkAssignmentItems.length; i++) {
                    let item = data.homeWorkAssignmentItems[i];
                    this.homeWorkAssignmentItems[i] = item && !(<any>item).toJSON ? new HomeWorkAssignmentItemDto(item) : <HomeWorkAssignmentItemDto>item;
                }
            }
            if (data.submittedHomeWorks) {
                this.submittedHomeWorks = [];
                for (let i = 0; i < data.submittedHomeWorks.length; i++) {
                    let item = data.submittedHomeWorks[i];
                    this.submittedHomeWorks[i] = item && !(<any>item).toJSON ? new SubmittedHomeWorkDto(item) : <SubmittedHomeWorkDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["homeWorkAssignmentItems"])) {
                this.homeWorkAssignmentItems = [] as any;
                for (let item of _data["homeWorkAssignmentItems"])
                    this.homeWorkAssignmentItems!.push(HomeWorkAssignmentItemDto.fromJS(item));
            }
            if (Array.isArray(_data["submittedHomeWorks"])) {
                this.submittedHomeWorks = [] as any;
                for (let item of _data["submittedHomeWorks"])
                    this.submittedHomeWorks!.push(SubmittedHomeWorkDto.fromJS(item));
            }
            this.yearClassId = _data["yearClassId"];
            this.dueDate = _data["dueDate"] ? moment(_data["dueDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HomeWorkAssignmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new HomeWorkAssignmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.homeWorkAssignmentItems)) {
            data["homeWorkAssignmentItems"] = [];
            for (let item of this.homeWorkAssignmentItems)
                data["homeWorkAssignmentItems"].push(item.toJSON());
        }
        if (Array.isArray(this.submittedHomeWorks)) {
            data["submittedHomeWorks"] = [];
            for (let item of this.submittedHomeWorks)
                data["submittedHomeWorks"].push(item.toJSON());
        }
        data["yearClassId"] = this.yearClassId;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): HomeWorkAssignmentDto {
        const json = this.toJSON();
        let result = new HomeWorkAssignmentDto();
        result.init(json);
        return result;
    }
}

export interface IHomeWorkAssignmentDto {
    homeWorkAssignmentItems?: IHomeWorkAssignmentItemDto[] | undefined;
    submittedHomeWorks?: ISubmittedHomeWorkDto[] | undefined;
    yearClassId: string;
    dueDate: moment.Moment;
}

export class HomeWorkAssignmentItemDto implements IHomeWorkAssignmentItemDto {
    sentence?: string | undefined;
    word?: string | undefined;
    spokenWordAsMp3?: string | undefined;

    constructor(data?: IHomeWorkAssignmentItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sentence = _data["sentence"];
            this.word = _data["word"];
            this.spokenWordAsMp3 = _data["spokenWordAsMp3"];
        }
    }

    static fromJS(data: any): HomeWorkAssignmentItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new HomeWorkAssignmentItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sentence"] = this.sentence;
        data["word"] = this.word;
        data["spokenWordAsMp3"] = this.spokenWordAsMp3;
        return data; 
    }

    clone(): HomeWorkAssignmentItemDto {
        const json = this.toJSON();
        let result = new HomeWorkAssignmentItemDto();
        result.init(json);
        return result;
    }
}

export interface IHomeWorkAssignmentItemDto {
    sentence?: string | undefined;
    word?: string | undefined;
    spokenWordAsMp3?: string | undefined;
}

export class SubmittedHomeWorkDto implements ISubmittedHomeWorkDto {
    studentName?: string | undefined;
    score!: number;

    constructor(data?: ISubmittedHomeWorkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.studentName = _data["studentName"];
            this.score = _data["score"];
        }
    }

    static fromJS(data: any): SubmittedHomeWorkDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubmittedHomeWorkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["studentName"] = this.studentName;
        data["score"] = this.score;
        return data; 
    }

    clone(): SubmittedHomeWorkDto {
        const json = this.toJSON();
        let result = new SubmittedHomeWorkDto();
        result.init(json);
        return result;
    }
}

export interface ISubmittedHomeWorkDto {
    studentName?: string | undefined;
    score: number;
}

export class HomeWorkAssignmentBaseDto implements IHomeWorkAssignmentBaseDto {
    yearClassId!: string;
    dueDate!: moment.Moment;

    constructor(data?: IHomeWorkAssignmentBaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.yearClassId = _data["yearClassId"];
            this.dueDate = _data["dueDate"] ? moment(_data["dueDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HomeWorkAssignmentBaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new HomeWorkAssignmentBaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["yearClassId"] = this.yearClassId;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): HomeWorkAssignmentBaseDto {
        const json = this.toJSON();
        let result = new HomeWorkAssignmentBaseDto();
        result.init(json);
        return result;
    }
}

export interface IHomeWorkAssignmentBaseDto {
    yearClassId: string;
    dueDate: moment.Moment;
}

export class HomeWorkAssignmentAddDto extends HomeWorkAssignmentBaseDto implements IHomeWorkAssignmentAddDto {

    constructor(data?: IHomeWorkAssignmentAddDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): HomeWorkAssignmentAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new HomeWorkAssignmentAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }

    clone(): HomeWorkAssignmentAddDto {
        const json = this.toJSON();
        let result = new HomeWorkAssignmentAddDto();
        result.init(json);
        return result;
    }
}

export interface IHomeWorkAssignmentAddDto extends IHomeWorkAssignmentBaseDto {
}

export class HomeWorkAssignmentUpdateDto extends HomeWorkAssignmentBaseDto implements IHomeWorkAssignmentUpdateDto {
    id!: string;
    rowVersion?: string | undefined;

    constructor(data?: IHomeWorkAssignmentUpdateDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.rowVersion = _data["rowVersion"];
        }
    }

    static fromJS(data: any): HomeWorkAssignmentUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new HomeWorkAssignmentUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rowVersion"] = this.rowVersion;
        super.toJSON(data);
        return data; 
    }

    clone(): HomeWorkAssignmentUpdateDto {
        const json = this.toJSON();
        let result = new HomeWorkAssignmentUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IHomeWorkAssignmentUpdateDto extends IHomeWorkAssignmentBaseDto {
    id: string;
    rowVersion?: string | undefined;
}

export class HomeWorkAssignmentItemBaseDto implements IHomeWorkAssignmentItemBaseDto {
    homeWorkAssignmentId!: string;
    sentence?: string | undefined;
    word?: string | undefined;

    constructor(data?: IHomeWorkAssignmentItemBaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.homeWorkAssignmentId = _data["homeWorkAssignmentId"];
            this.sentence = _data["sentence"];
            this.word = _data["word"];
        }
    }

    static fromJS(data: any): HomeWorkAssignmentItemBaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new HomeWorkAssignmentItemBaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["homeWorkAssignmentId"] = this.homeWorkAssignmentId;
        data["sentence"] = this.sentence;
        data["word"] = this.word;
        return data; 
    }

    clone(): HomeWorkAssignmentItemBaseDto {
        const json = this.toJSON();
        let result = new HomeWorkAssignmentItemBaseDto();
        result.init(json);
        return result;
    }
}

export interface IHomeWorkAssignmentItemBaseDto {
    homeWorkAssignmentId: string;
    sentence?: string | undefined;
    word?: string | undefined;
}

export class HomeWorkAssignmentItemAddDto extends HomeWorkAssignmentItemBaseDto implements IHomeWorkAssignmentItemAddDto {

    constructor(data?: IHomeWorkAssignmentItemAddDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): HomeWorkAssignmentItemAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new HomeWorkAssignmentItemAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }

    clone(): HomeWorkAssignmentItemAddDto {
        const json = this.toJSON();
        let result = new HomeWorkAssignmentItemAddDto();
        result.init(json);
        return result;
    }
}

export interface IHomeWorkAssignmentItemAddDto extends IHomeWorkAssignmentItemBaseDto {
}

export class HomeWorkAssignmentItemUpdateDto extends HomeWorkAssignmentItemBaseDto implements IHomeWorkAssignmentItemUpdateDto {
    id!: string;
    rowVersion?: string | undefined;

    constructor(data?: IHomeWorkAssignmentItemUpdateDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.rowVersion = _data["rowVersion"];
        }
    }

    static fromJS(data: any): HomeWorkAssignmentItemUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new HomeWorkAssignmentItemUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rowVersion"] = this.rowVersion;
        super.toJSON(data);
        return data; 
    }

    clone(): HomeWorkAssignmentItemUpdateDto {
        const json = this.toJSON();
        let result = new HomeWorkAssignmentItemUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IHomeWorkAssignmentItemUpdateDto extends IHomeWorkAssignmentItemBaseDto {
    id: string;
    rowVersion?: string | undefined;
}

export class IdDto implements IIdDto {
    id!: number;
    rowVersion?: string | undefined;

    constructor(data?: IIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.rowVersion = _data["rowVersion"];
        }
    }

    static fromJS(data: any): IdDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rowVersion"] = this.rowVersion;
        return data; 
    }

    clone(): IdDto {
        const json = this.toJSON();
        let result = new IdDto();
        result.init(json);
        return result;
    }
}

export interface IIdDto {
    id: number;
    rowVersion?: string | undefined;
}

export class CurrentUsersClaimsDto implements ICurrentUsersClaimsDto {
    claims?: string[] | undefined;

    constructor(data?: ICurrentUsersClaimsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(item);
            }
        }
    }

    static fromJS(data: any): CurrentUsersClaimsDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentUsersClaimsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item);
        }
        return data; 
    }

    clone(): CurrentUsersClaimsDto {
        const json = this.toJSON();
        let result = new CurrentUsersClaimsDto();
        result.init(json);
        return result;
    }
}

export interface ICurrentUsersClaimsDto {
    claims?: string[] | undefined;
}

export class UserLookupsDto implements IUserLookupsDto {
    roles?: LookupDto[] | undefined;
    colleges?: LookupDto[] | undefined;

    constructor(data?: IUserLookupsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(LookupDto.fromJS(item));
            }
            if (Array.isArray(_data["colleges"])) {
                this.colleges = [] as any;
                for (let item of _data["colleges"])
                    this.colleges!.push(LookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserLookupsDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLookupsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (Array.isArray(this.colleges)) {
            data["colleges"] = [];
            for (let item of this.colleges)
                data["colleges"].push(item.toJSON());
        }
        return data; 
    }

    clone(): UserLookupsDto {
        const json = this.toJSON();
        let result = new UserLookupsDto();
        result.init(json);
        return result;
    }
}

export interface IUserLookupsDto {
    roles?: LookupDto[] | undefined;
    colleges?: LookupDto[] | undefined;
}

export class LookupDto extends BaseDto implements ILookupDto {
    displayName?: string | undefined;

    constructor(data?: ILookupDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): LookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new LookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        super.toJSON(data);
        return data; 
    }

    clone(): LookupDto {
        const json = this.toJSON();
        let result = new LookupDto();
        result.init(json);
        return result;
    }
}

export interface ILookupDto extends IBaseDto {
    displayName?: string | undefined;
}

export class UserDto extends BaseDto implements IUserDto {
    identityId?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    roleId!: string;
    collegeIds?: string[] | undefined;

    constructor(data?: IUserDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.identityId = _data["identityId"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.roleId = _data["roleId"];
            if (Array.isArray(_data["collegeIds"])) {
                this.collegeIds = [] as any;
                for (let item of _data["collegeIds"])
                    this.collegeIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identityId"] = this.identityId;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["roleId"] = this.roleId;
        if (Array.isArray(this.collegeIds)) {
            data["collegeIds"] = [];
            for (let item of this.collegeIds)
                data["collegeIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto extends IBaseDto {
    identityId?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    roleId: string;
    collegeIds?: string[] | undefined;
}

export class AddUserDto extends BaseDto implements IAddUserDto {
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    roleId!: string;
    collegeIds?: string[] | undefined;

    constructor(data?: IAddUserDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.roleId = _data["roleId"];
            if (Array.isArray(_data["collegeIds"])) {
                this.collegeIds = [] as any;
                for (let item of _data["collegeIds"])
                    this.collegeIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["roleId"] = this.roleId;
        if (Array.isArray(this.collegeIds)) {
            data["collegeIds"] = [];
            for (let item of this.collegeIds)
                data["collegeIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }

    clone(): AddUserDto {
        const json = this.toJSON();
        let result = new AddUserDto();
        result.init(json);
        return result;
    }
}

export interface IAddUserDto extends IBaseDto {
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    roleId: string;
    collegeIds?: string[] | undefined;
}

export class UpdateUserDto extends BaseDto implements IUpdateUserDto {
    identityId?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    roleId!: string;
    collegeIds?: string[] | undefined;

    constructor(data?: IUpdateUserDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.identityId = _data["identityId"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.roleId = _data["roleId"];
            if (Array.isArray(_data["collegeIds"])) {
                this.collegeIds = [] as any;
                for (let item of _data["collegeIds"])
                    this.collegeIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identityId"] = this.identityId;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["roleId"] = this.roleId;
        if (Array.isArray(this.collegeIds)) {
            data["collegeIds"] = [];
            for (let item of this.collegeIds)
                data["collegeIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }

    clone(): UpdateUserDto {
        const json = this.toJSON();
        let result = new UpdateUserDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserDto extends IBaseDto {
    identityId?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    roleId: string;
    collegeIds?: string[] | undefined;
}

export class YearClassDto extends BaseDtoFull implements IYearClassDto {
    collegeId!: string;
    academicYear!: number;
    yearClassName?: string | undefined;
    teacherName?: string | undefined;

    constructor(data?: IYearClassDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.collegeId = _data["collegeId"];
            this.academicYear = _data["academicYear"];
            this.yearClassName = _data["yearClassName"];
            this.teacherName = _data["teacherName"];
        }
    }

    static fromJS(data: any): YearClassDto {
        data = typeof data === 'object' ? data : {};
        let result = new YearClassDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collegeId"] = this.collegeId;
        data["academicYear"] = this.academicYear;
        data["yearClassName"] = this.yearClassName;
        data["teacherName"] = this.teacherName;
        super.toJSON(data);
        return data; 
    }

    clone(): YearClassDto {
        const json = this.toJSON();
        let result = new YearClassDto();
        result.init(json);
        return result;
    }
}

export interface IYearClassDto extends IBaseDtoFull {
    collegeId: string;
    academicYear: number;
    yearClassName?: string | undefined;
    teacherName?: string | undefined;
}

export class YearClassBaseDto implements IYearClassBaseDto {
    collegeId!: string;
    academicYear!: number;
    yearClassName?: string | undefined;
    teacherName?: string | undefined;

    constructor(data?: IYearClassBaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.collegeId = _data["collegeId"];
            this.academicYear = _data["academicYear"];
            this.yearClassName = _data["yearClassName"];
            this.teacherName = _data["teacherName"];
        }
    }

    static fromJS(data: any): YearClassBaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new YearClassBaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collegeId"] = this.collegeId;
        data["academicYear"] = this.academicYear;
        data["yearClassName"] = this.yearClassName;
        data["teacherName"] = this.teacherName;
        return data; 
    }

    clone(): YearClassBaseDto {
        const json = this.toJSON();
        let result = new YearClassBaseDto();
        result.init(json);
        return result;
    }
}

export interface IYearClassBaseDto {
    collegeId: string;
    academicYear: number;
    yearClassName?: string | undefined;
    teacherName?: string | undefined;
}

export class YearClassAddDto extends YearClassBaseDto implements IYearClassAddDto {

    constructor(data?: IYearClassAddDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): YearClassAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new YearClassAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }

    clone(): YearClassAddDto {
        const json = this.toJSON();
        let result = new YearClassAddDto();
        result.init(json);
        return result;
    }
}

export interface IYearClassAddDto extends IYearClassBaseDto {
}

export class YearClassUpdateDto extends YearClassBaseDto implements IYearClassUpdateDto {
    id!: string;
    rowVersion?: string | undefined;

    constructor(data?: IYearClassUpdateDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.rowVersion = _data["rowVersion"];
        }
    }

    static fromJS(data: any): YearClassUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new YearClassUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rowVersion"] = this.rowVersion;
        super.toJSON(data);
        return data; 
    }

    clone(): YearClassUpdateDto {
        const json = this.toJSON();
        let result = new YearClassUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IYearClassUpdateDto extends IYearClassBaseDto {
    id: string;
    rowVersion?: string | undefined;
}